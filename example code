// HDL은 크게 네 부분으로 구성된다. 
// 1) 설계하고자 하는 모듈의 이름과 입출력 포트의 이름을 정한다.
// 2) 각 입출력 포트에 대해서 각 포트가 입력, 출력, 또는 입출력인지 선언
// 3) 각 포트의 버스 폭 선언
// 4) 동작 기술(assign, always, initial 사용)

module 모듈 이름(      // 모듈 이름 정의
   i_a,
   i_b,   // 모듈의 입출력 포트 이름
   o_s);

   input i_a;   // i_a는 입력 포트
   input i_b;   // i_b는 입력 포트
   output  [3:0] o_s;  // o_s는 출력 포트이며, 버스폭은 4비트
   ...
   assign = ...  // 동작 기술
   ...
   always @(...)  // 동작 기술
   ...
   initial  // 동작 기술
   ...
endmodule

// module, endmodule: verilog HDL 설계 단위인 모듈의 시작과 끝
// 키워드: 소문자 사용, module, input, output, endmodule
// 식별자: 신호 변수를구분하기 위해 부여하는 이름
// 입력 신호: i_이름, 출력 신호: ㅇ_이름, wire: w_이름, 레지스터: r_이름

// 모듈의 입출력 포트: input, output, inout
// 1) 입력 포트 input: 지속적으로 신호가 입력되어야 하므로, net 형식인 wire
// 2) 출력 포트 output: 기본 데이터 타입은 wire. 즉 포트의 데이터 타입을 선언하지 않은 경우에는 기본값으로 wire가 된다.

//소스코드1: 2개의 4비트 덧셈기를 사용하여 8비트 덧셈을 수행

module Adder_8bit(           // 모듈 정의, C언어에서의 함수 정의와 비슷
    input [7:0] a,           // [7:0] : 8비트 버스(비트 폭을 명시적으로 정의), C언어의 unsigned char a와 비슷
    input [7:0] b,           // b라는 8비트 입력
    input cin,               // cin 이라는 단일 비트 입력
    output [7:0] sum,        // sum이라는 8비트 출력 정의
    output co                // co라는 단일 비트 출력을 정의
    );

    wire w_carry0;           // 내부 신호 정의, wire는 물리적인 배선과 비슷한 개념으로, c언어의 변수에 해당되지만 값이 계속 바뀔 수 있
                             // wire은 두 인스턴스 간의 신호를 연결한다.
Adder_4bit U_4bit_Adder0(
   .a(a[3:0]),
   .b(b[3:0]),
   .cin(cin),
   .sum(sum[3:0]),
   .co(w_carry0)             // 첫 번째 4비트 덧셈기의 co 출력이 'w_carry0' 라는 wire에 연결된다.
);

Adder_4bit U_4bit_Adder1(
   .a(a[7:4]),
   .b(b[7:4]),
   .cin(w_carry0),
   .sum(sum[7:4]),
   .co(co)
);

endmodule


//소스코드2: 4비트 덧셈기

module Adder_4bit(          // 4비트 덧셈기 모듈 정의 --> 이 모듈을 실게로 사용하려면, 인스턴스를 만들어야 함
    input [3:0] a,
    input [3:0] b,
    input cin,
    output [3:0] sum,
    output co
);
// Adder_4bit 모듈의 내부 구현
endmodule
                               // verilog에서 모듈의 인스턴스를 생성할 때, 모듈 내부의 포트와 외부 신호를 연결해야 함: 포트 이름(연결할 신호)
Adder_4bit U_4bit_Adder0(      // U_4bit_Adder0는 Adder_4bit 모듈의 인스턴스
   .a(a[3:0]),                 // .: 포트 연결 연산자, 모듈의 특정 포트와 외부 신호를 연결하는 역할을 한다. 
   .b(b[3:0]),                 // b: U_4bit_Adder0의 Adder_4bit 모듈 내부에 정의된 포트
   .cin(cin),                  
   .sum(sum[3:0]),             // _____(): 괄호 안에 있는 것을 바깥에 있는 것과 연
   .co(w_carry0)
);

//소스코드3: top_module

`timescale 1ns / 1ps      // 시뮬레이션에서 시간 단위를 정의, 1ns: 기본 시간 단위, 1ps: 시뮬레이션 정밀도로 사용


module adder_fnd(
    input [7:0] a,   // 8비트 입력 a 정의
    input [7:0] b,   // 8비트 입력 b 정의
    input [1:0] fndSel,  // 2비트 입력 정의
    output [3:0] fndCom,  // 4비트 출력 정의
    output [7:0] fndFont  // 4비트 출력 정의
    );

    wire [7:0] w_sum;   // 8비트 wire 신호 w_sum 정의, 덧셈 결과를 저장
    wire w_carry;   // 단일 비트 wire 신호 w_carry를 정의, 캐리 아웃 신호를 저장

Adder_8bit U_Adder(
    .a(a),   // 상위 모듈의 a 신호를 Adder_8bit 모듈의 a 포트에 연결
    .b(b),    // 밖에 있는 게 모듈, 안에 있는 것을 밖에 있는 모듈에 연
    .cin(1'b0),   //  상위 모듈에서 정의된 상수 1'b0(0) 신호를 Adder_8bit 모듈의 cin 포트에 연결
    .sum(w_sum),
    .co(w_carry)
    );

fndController U_FndController(
    .fndSel(fndSel),
    .digit({5'b0, w_carry, w_sum}),
    .fndFont(fndFont),
    .fndCom(fndCom)
    );

endmodule

